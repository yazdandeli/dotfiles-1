{"version":3,"sources":["out-vscode/vs/workbench/contrib/webview/browser/pre/service-worker.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/// <reference lib=\"webworker\" />\n\nconst VERSION = 1;\n\nconst rootPath = self.location.pathname.replace(/\\/service-worker.js$/, '');\n\n/**\n * Root path for resources\n */\nconst resourceRoot = rootPath + '/vscode-resource';\n\nconst resolveTimeout = 30000;\n\n/**\n * @template T\n * @typedef {{\n *     resolve: (x: T) => void,\n *     promise: Promise<T>\n * }} RequestStoreEntry\n */\n\n/**\n * @template T\n */\nclass RequestStore {\n\tconstructor() {\n\t\t/** @type {Map<string, RequestStoreEntry<T>>} */\n\t\tthis.map = new Map();\n\t}\n\n\t/**\n\t * @param {string} webviewId\n\t * @param {string} path\n\t * @return {Promise<T> | undefined}\n\t */\n\tget(webviewId, path) {\n\t\tconst entry = this.map.get(this._key(webviewId, path));\n\t\treturn entry && entry.promise;\n\t}\n\n\t/**\n\t * @param {string} webviewId\n\t * @param {string} path\n\t * @returns {Promise<T>}\n\t */\n\tcreate(webviewId, path) {\n\t\tconst existing = this.get(webviewId, path);\n\t\tif (existing) {\n\t\t\treturn existing;\n\t\t}\n\t\tlet resolve;\n\t\tconst promise = new Promise(r => resolve = r);\n\t\tconst entry = { resolve, promise };\n\t\tconst key = this._key(webviewId, path);\n\t\tthis.map.set(key, entry);\n\n\t\tconst dispose = () => {\n\t\t\tclearTimeout(timeout);\n\t\t\tconst existingEntry = this.map.get(key);\n\t\t\tif (existingEntry === entry) {\n\t\t\t\treturn this.map.delete(key);\n\t\t\t}\n\t\t};\n\t\tconst timeout = setTimeout(dispose, resolveTimeout);\n\t\treturn promise;\n\t}\n\n\t/**\n\t * @param {string} webviewId\n\t * @param {string} path\n\t * @param {T} result\n\t * @return {boolean}\n\t */\n\tresolve(webviewId, path, result) {\n\t\tconst entry = this.map.get(this._key(webviewId, path));\n\t\tif (!entry) {\n\t\t\treturn false;\n\t\t}\n\t\tentry.resolve(result);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @param {string} webviewId\n\t * @param {string} path\n\t * @return {string}\n\t */\n\t_key(webviewId, path) {\n\t\treturn `${webviewId}@@@${path}`;\n\t}\n}\n\n/**\n * Map of requested paths to responses.\n *\n * @type {RequestStore<{ body: any, mime: string } | undefined>}\n */\nconst resourceRequestStore = new RequestStore();\n\n/**\n * Map of requested localhost origins to optional redirects.\n *\n * @type {RequestStore<string | undefined>}\n */\nconst localhostRequestStore = new RequestStore();\n\nconst notFound = () =>\n\tnew Response('Not Found', { status: 404, });\n\nself.addEventListener('message', async (event) => {\n\tswitch (event.data.channel) {\n\t\tcase 'version':\n\t\t\t{\n\t\t\t\tself.clients.get(event.source.id).then(client => {\n\t\t\t\t\tif (client) {\n\t\t\t\t\t\tclient.postMessage({\n\t\t\t\t\t\t\tchannel: 'version',\n\t\t\t\t\t\t\tversion: VERSION\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\t\tcase 'did-load-resource':\n\t\t\t{\n\t\t\t\tconst webviewId = getWebviewIdForClient(event.source);\n\t\t\t\tconst data = event.data.data;\n\t\t\t\tconst response = data.status === 200\n\t\t\t\t\t? { body: data.data, mime: data.mime }\n\t\t\t\t\t: undefined;\n\n\t\t\t\tif (!resourceRequestStore.resolve(webviewId, data.path, response)) {\n\t\t\t\t\tconsole.log('Could not resolve unknown resource', data.path);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\n\t\tcase 'did-load-localhost':\n\t\t\t{\n\t\t\t\tconst webviewId = getWebviewIdForClient(event.source);\n\t\t\t\tconst data = event.data.data;\n\t\t\t\tif (!localhostRequestStore.resolve(webviewId, data.origin, data.location)) {\n\t\t\t\t\tconsole.log('Could not resolve unknown localhost', data.origin);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t}\n\n\tconsole.log('Unknown message');\n});\n\nself.addEventListener('fetch', (event) => {\n\tconst requestUrl = new URL(event.request.url);\n\n\t// See if it's a resource request\n\tif (requestUrl.origin === self.origin && requestUrl.pathname.startsWith(resourceRoot + '/')) {\n\t\treturn event.respondWith(processResourceRequest(event, requestUrl));\n\t}\n\n\t// See if it's a localhost request\n\tif (requestUrl.origin !== self.origin && requestUrl.host.match(/^localhost:(\\d+)$/)) {\n\t\treturn event.respondWith(processLocalhostRequest(event, requestUrl));\n\t}\n});\n\nself.addEventListener('install', (event) => {\n\tevent.waitUntil(self.skipWaiting()); // Activate worker immediately\n});\n\nself.addEventListener('activate', (event) => {\n\tevent.waitUntil(self.clients.claim()); // Become available to all pages\n});\n\nasync function processResourceRequest(event, requestUrl) {\n\tconst client = await self.clients.get(event.clientId);\n\tif (!client) {\n\t\tconsole.log('Could not find inner client for request');\n\t\treturn notFound();\n\t}\n\n\tconst webviewId = getWebviewIdForClient(client);\n\tconst resourcePath = requestUrl.pathname.startsWith(resourceRoot + '/') ? requestUrl.pathname.slice(resourceRoot.length) :  requestUrl.pathname;\n\n\tfunction resolveResourceEntry(entry) {\n\t\tif (!entry) {\n\t\t\treturn notFound();\n\t\t}\n\t\treturn new Response(entry.body, {\n\t\t\tstatus: 200,\n\t\t\theaders: { 'Content-Type': entry.mime }\n\t\t});\n\t}\n\n\tconst parentClient = await getOuterIframeClient(webviewId);\n\tif (!parentClient) {\n\t\tconsole.log('Could not find parent client for request');\n\t\treturn notFound();\n\t}\n\n\t// Check if we've already resolved this request\n\tconst existing = resourceRequestStore.get(webviewId, resourcePath);\n\tif (existing) {\n\t\treturn existing.then(resolveResourceEntry);\n\t}\n\n\tparentClient.postMessage({\n\t\tchannel: 'load-resource',\n\t\tpath: resourcePath\n\t});\n\n\treturn resourceRequestStore.create(webviewId, resourcePath)\n\t\t.then(resolveResourceEntry);\n}\n\n/**\n * @param {*} event\n * @param {URL} requestUrl\n */\nasync function processLocalhostRequest(event, requestUrl) {\n\tconst client = await self.clients.get(event.clientId);\n\tif (!client) {\n\t\t// This is expected when requesting resources on other localhost ports\n\t\t// that are not spawned by vs code\n\t\treturn undefined;\n\t}\n\tconst webviewId = getWebviewIdForClient(client);\n\tconst origin = requestUrl.origin;\n\n\tconst resolveRedirect = redirectOrigin => {\n\t\tif (!redirectOrigin) {\n\t\t\treturn fetch(event.request);\n\t\t}\n\t\tconst location = event.request.url.replace(new RegExp(`^${requestUrl.origin}(/|$)`), `${redirectOrigin}$1`);\n\t\treturn new Response(null, {\n\t\t\tstatus: 302,\n\t\t\theaders: {\n\t\t\t\tLocation: location\n\t\t\t}\n\t\t});\n\t};\n\n\tconst parentClient = await getOuterIframeClient(webviewId);\n\tif (!parentClient) {\n\t\tconsole.log('Could not find parent client for request');\n\t\treturn notFound();\n\t}\n\n\t// Check if we've already resolved this request\n\tconst existing = localhostRequestStore.get(webviewId, origin);\n\tif (existing) {\n\t\treturn existing.then(resolveRedirect);\n\t}\n\n\tparentClient.postMessage({\n\t\tchannel: 'load-localhost',\n\t\torigin: origin\n\t});\n\n\treturn localhostRequestStore.create(webviewId, origin)\n\t\t.then(resolveRedirect);\n}\n\nfunction getWebviewIdForClient(client) {\n\tconst requesterClientUrl = new URL(client.url);\n\treturn requesterClientUrl.search.match(/\\bid=([a-z0-9-]+)/i)[1];\n}\n\nasync function getOuterIframeClient(webviewId) {\n\tconst allClients = await self.clients.matchAll({ includeUncontrolled: true });\n\treturn allClients.find(client => {\n\t\tconst clientUrl = new URL(client.url);\n\t\treturn (clientUrl.pathname === `${rootPath}/` || clientUrl.pathname === `${rootPath}/index.html`) && clientUrl.search.match(new RegExp('\\\\bid=' + webviewId));\n\t});\n}\n"],"mappings":"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","names":[],"file":"service-worker.js"}